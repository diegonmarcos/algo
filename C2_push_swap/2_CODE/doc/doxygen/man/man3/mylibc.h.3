.TH "src/checker_bonus/libs/mylibs/mylibc/inc/mylibc.h" 3 "Thu Mar 20 2025 16:00:59" "push_swap" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/checker_bonus/libs/mylibs/mylibc/inc/mylibc.h
.SH SYNOPSIS
.br
.PP
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/wait\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <sys/file\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'mylibc_defines\&.h'\fP
.br
\fC#include 'mylibc_data\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBft_pipe\fP (int *pipe_fd)"
.br
.ti -1c
.RI "int \fBft_fork\fP (void)"
.br
.ti -1c
.RI "void * \fBft_calloc\fP (size_t count, size_t size)"
.br
.ti -1c
.RI "void \fBft_calloc_\fP (size_t count, size_t size, void **array)"
.br
.ti -1c
.RI "void \fBft_calloc_2d\fP (size_t count, char var_type, void ***array)"
.br
.ti -1c
.RI "void * \fBft_calloc_fd\fP (char *filename, size_t count, size_t sizeofvar)"
.br
.ti -1c
.RI "void \fBft_free_fd\fP (char *filename)"
.br
.ti -1c
.RI "void \fBft_free_array_2d\fP (char **array)"
.br
.ti -1c
.RI "void \fBft_free_array_int\fP (int **array_int, int size)"
.br
.ti -1c
.RI "void \fBft_free_fd_new\fP (char *filename)"
.br
.ti -1c
.RI "void \fBft_free_array_halt\fP (char **farray, int failed)"
.br
.ti -1c
.RI "void \fBhalt_exit_\fP (int status)"
.br
.ti -1c
.RI "void \fBhalt_exit_fd\fP (int status)"
.br
.ti -1c
.RI "void \fBhalt_exit\fP (int status, char *description)"
.br
.ti -1c
.RI "int \fBft_open\fP (char *file, int flags,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBft_open_readorwrite\fP (char *file, int read_or_write)"
.br
.RI "0 = read, 1 = write, 2 = append "
.ti -1c
.RI "int \fBft_sed\fP (char *file, char *s1, char *s2)"
.br
.ti -1c
.RI "int \fBft_fgets_\fP (char *line, int line_size, int fd)"
.br
.ti -1c
.RI "char * \fBget_next_line_join\fP (int fd)"
.br
.ti -1c
.RI "int \fBget_next_line_split\fP (int fd, char **line)"
.br
.ti -1c
.RI "char * \fBget_next_line\fP (int fd)"
.br
.ti -1c
.RI "char ** \fBft_split\fP (char *filename, const char *s, char c)"
.br
.ti -1c
.RI "long * \fBft_split_long\fP (char *filename, char const *array_source, char delimitator, int *size)"
.br
.ti -1c
.RI "char * \fBft_substr\fP (char *filename, char const *s, unsigned int start, size_t len)"
.br
.RI "Extracts a substring from a given string\&. "
.ti -1c
.RI "int \fBft_countwords\fP (char const *s, char c)"
.br
.ti -1c
.RI "char * \fBft_strtrim\fP (char const *s1, char const *set)"
.br
.ti -1c
.RI "void * \fBft_memmove\fP (void *dst, const void *src, size_t len)"
.br
.ti -1c
.RI "void * \fBft_memcpy\fP (void *dst, const void *src, size_t n)"
.br
.ti -1c
.RI "void * \fBft_memccpy\fP (void *dst, const void *src, int c, size_t n)"
.br
.ti -1c
.RI "size_t \fBft_strlcpy\fP (char *dst, const char *src, size_t dstsize)"
.br
.ti -1c
.RI "void * \fBft_memset\fP (void *b, int c, size_t len)"
.br
.ti -1c
.RI "void \fBft_bzero\fP (void *s, size_t n)"
.br
.ti -1c
.RI "void \fBft_bzero_2d\fP (void **array, size_t lines, size_t size)"
.br
.ti -1c
.RI "size_t \fBft_strlcat\fP (char *dst, const char *src, size_t dstsize)"
.br
.ti -1c
.RI "int \fBft_snprintf\fP (char *str, size_t size, const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBft_memcmp\fP (const void *s1, const void *s2, size_t n)"
.br
.ti -1c
.RI "int \fBft_strncmp\fP (const char *s1, const char *s2, size_t n)"
.br
.ti -1c
.RI "int \fBft_strcmp_duplicate\fP (char *str, char **array)"
.br
.ti -1c
.RI "int \fBft_strcmp_duplicate_inter\fP (char **array)"
.br
.ti -1c
.RI "int \fBft_strcmp\fP (const char *s1, const char *s2)"
.br
.ti -1c
.RI "void * \fBft_memchr\fP (const void *s, int c, size_t n)"
.br
.ti -1c
.RI "char * \fBft_strchr\fP (const char *s, int c)"
.br
.ti -1c
.RI "int \fBft_strchr_char_duplicate\fP (char c, char **argv, int i)"
.br
.ti -1c
.RI "int * \fBft_strchr_int_duplicate\fP (int *array_int, int size, int position)"
.br
.ti -1c
.RI "char * \fBft_strchr_gnl\fP (char *s, int c)"
.br
.ti -1c
.RI "char * \fBft_strnstr\fP (const char *haystack, const char *needle, size_t len)"
.br
.ti -1c
.RI "char * \fBft_strrchr\fP (const char *s, int c)"
.br
.ti -1c
.RI "char * \fBft_strchr_char_duplicate_interation\fP (char **array_char)"
.br
.ti -1c
.RI "int * \fBft_strchr_int_duplicate_interation\fP (int *array_int, int size)"
.br
.ti -1c
.RI "int \fBft_contains\fP (int num, char **argv, int i)"
.br
.ti -1c
.RI "int \fBft_atoi\fP (const char *str)"
.br
.ti -1c
.RI "long \fBft_atoi_long\fP (const char *ptr)"
.br
.ti -1c
.RI "void * \fBft_atoi_base\fP (const char *str, int str_base)"
.br
.ti -1c
.RI "long \fBft_strol\fP (const char *str, char **endptr, int base)"
.br
.ti -1c
.RI "int \fBft_atoi_safe\fP (const char *ptr)"
.br
.ti -1c
.RI "long * \fBft_atoi_long_array\fP (const char **ptr)"
.br
.ti -1c
.RI "char * \fBft_itoa\fP (int n)"
.br
.ti -1c
.RI "int \fBft_digit_count\fP (long int i)"
.br
.ti -1c
.RI "size_t \fBft_num_unsign\fP (size_t num)"
.br
.ti -1c
.RI "int \fBft_pointer_hexa\fP (void *p)"
.br
.ti -1c
.RI "int \fBft_hexa_minusc\fP (int num)"
.br
.ti -1c
.RI "int \fBft_hexa_mayusc\fP (int num)"
.br
.ti -1c
.RI "size_t \fBft_strlen\fP (const char *str)"
.br
.ti -1c
.RI "int \fBft_array_size\fP (char **s)"
.br
.ti -1c
.RI "size_t \fBft_strlen_gnl\fP (char *s, int c)"
.br
.ti -1c
.RI "int \fBft_isalnum\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isalpha\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isascii\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isdigit\fP (int c)"
.br
.ti -1c
.RI "int \fBft_isnum\fP (const char *num)"
.br
.ti -1c
.RI "int \fBft_is_num_num\fP (const char **str)"
.br
.ti -1c
.RI "int \fBft_isprint\fP (int c)"
.br
.ti -1c
.RI "int \fBft_is_array_int\fP (char **array)"
.br
.ti -1c
.RI "int \fBft_tolower\fP (int c)"
.br
.ti -1c
.RI "int \fBft_toupper\fP (int c)"
.br
.ti -1c
.RI "int \fBft_is_sorted_array_char\fP (char **arr)"
.br
.ti -1c
.RI "int \fBft_is_sorted_array_int\fP (int *arr, int size)"
.br
.ti -1c
.RI "void \fBft_striteri\fP (char *s, void(*f)(unsigned int, char *))"
.br
.ti -1c
.RI "char * \fBft_strmapi\fP (char const *s, char(*f)(unsigned int, char))"
.br
.ti -1c
.RI "char * \fBft_strdup\fP (char *name, const char *s1)"
.br
.ti -1c
.RI "char * \fBft_strjoin\fP (char *filename, char const *s1, char const *s2)"
.br
.ti -1c
.RI "char * \fBft_strjoin_gnl\fP (char *left_str, char *buff, int c)"
.br
.ti -1c
.RI "int \fBft_write_bff\fP (int fd, char *string, int len)"
.br
.ti -1c
.RI "void \fBft_putchar_fd\fP (char c, int fd)"
.br
.ti -1c
.RI "void \fBft_putendl_fd\fP (char *s, int fd)"
.br
.ti -1c
.RI "void \fBft_putnbr_fd\fP (int n, int fd)"
.br
.ti -1c
.RI "void \fBft_putstr_fd\fP (char *s, int fd)"
.br
.ti -1c
.RI "int \fBft_putstr\fP (char *str)"
.br
.ti -1c
.RI "int \fBft_putstr_str\fP (char **str)"
.br
.ti -1c
.RI "int \fBft_putnbr\fP (int n)"
.br
.ti -1c
.RI "int \fBft_putnbr_nbr\fP (int *n, int size)"
.br
.ti -1c
.RI "int \fBft_putstr_fd_fpr\fP (long fd, char *s)"
.br
.ti -1c
.RI "int \fBft_putstrstr_fd_fpr\fP (long fd, char **str)"
.br
.ti -1c
.RI "int \fBft_putnbr_fd_fpr\fP (long fd, int n)"
.br
.ti -1c
.RI "int \fBft_putchar_fd_fpr\fP (long fd, int c)"
.br
.ti -1c
.RI "int \fBft_putchar\fP (char c)"
.br
.ti -1c
.RI "int \fBft_putchar_int\fP (int c)"
.br
.ti -1c
.RI "int \fBft_pointer_hexa_fpr\fP (long fd, void *p)"
.br
.ti -1c
.RI "int \fBft_fprintf\fP (FILE *file_struct, const char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBft_fprintf1\fP (char *filename, const char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBft_fprintf2\fP (char *fopenmode, char *filename, const char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBft_printf\fP (const char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBft_dprintf\fP (long fd, const char *str,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBheapify\fP (int arr[], int n, int i)"
.br
.ti -1c
.RI "void \fBheap_sort\fP (int arr[], int n)"
.br
.ti -1c
.RI "void \fBquick_sort\fP (int arr[], int low, int high, int depthlimit)"
.br
.ti -1c
.RI "int \fBft_log_introsort\fP (int n)"
.br
.ti -1c
.RI "void \fBintro_sort\fP (int arr[], int n)"
.br
.ti -1c
.RI "void \fBswap_introsort\fP (int *a, int *b)"
.br
.ti -1c
.RI "int \fBpartition\fP (int arr[], int low, int high)"
.br
.ti -1c
.RI "int \fBft_abs\fP (int number)"
.br
.ti -1c
.RI "long \fBft_max\fP (long a, long b)"
.br
.ti -1c
.RI "int \fBft_round\fP (double num)"
.br
.ti -1c
.RI "void \fBmatrix3_init\fP (float(*matrix)[3])"
.br
.ti -1c
.RI "void \fBprint_bits\fP (unsigned char octet)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int ft_abs (int number)"

.SS "int ft_array_size (char ** s)"

.SS "int ft_atoi (const char * str)"

.SS "void * ft_atoi_base (const char * str, int str_base)"

.SS "long ft_atoi_long (const char * ptr)"

.SS "long * ft_atoi_long_array (const char ** ptr)"

.SS "int ft_atoi_safe (const char * ptr)"

.SS "void ft_bzero (void * s, size_t n)"

.SS "void ft_bzero_2d (void ** array, size_t lines, size_t size)"

.SS "void * ft_calloc (size_t count, size_t size)"

.SS "void ft_calloc_ (size_t count, size_t size, void ** array)"

.SS "void ft_calloc_2d (size_t count, char var_type, void *** array)"

.SS "void * ft_calloc_fd (char * filename, size_t count, size_t sizeofvar)"

.SS "int ft_contains (int num, char ** argv, int i)"

.SS "int ft_countwords (char const * s, char c)"

.SS "int ft_digit_count (long int i)"

.SS "int ft_dprintf (long fd, const char * str,  \&.\&.\&.)"

.SS "int ft_fgets_ (char * line, int line_size, int fd)"

.SS "int ft_fork (void)"

.SS "int ft_fprintf (FILE * file_struct, const char * str,  \&.\&.\&.)"

.SS "int ft_fprintf1 (char * filename, const char * str,  \&.\&.\&.)"

.SS "int ft_fprintf2 (char * fopenmode, char * filename, const char * str,  \&.\&.\&.)"

.SS "void ft_free_array_2d (char ** array)"

.SS "void ft_free_array_halt (char ** farray, int failed)"

.SS "void ft_free_array_int (int ** array_int, int size)"

.SS "void ft_free_fd (char * filename)"

.SS "void ft_free_fd_new (char * filename)"

.SS "int ft_hexa_mayusc (int num)"

.SS "int ft_hexa_minusc (int num)"

.SS "int ft_is_array_int (char ** array)"

.SS "int ft_is_num_num (const char ** str)"

.SS "int ft_is_sorted_array_char (char ** arr)"

.SS "int ft_is_sorted_array_int (int * arr, int size)"

.SS "int ft_isalnum (int c)"

.SS "int ft_isalpha (int c)"

.SS "int ft_isascii (int c)"

.SS "int ft_isdigit (int c)"

.SS "int ft_isnum (const char * num)"

.SS "int ft_isprint (int c)"

.SS "char * ft_itoa (int n)"

.SS "int ft_log_introsort (int n)"

.SS "long ft_max (long a, long b)"

.SS "void * ft_memccpy (void * dst, const void * src, int c, size_t n)"

.SS "void * ft_memchr (const void * s, int c, size_t n)"

.SS "int ft_memcmp (const void * s1, const void * s2, size_t n)"

.SS "void * ft_memcpy (void * dst, const void * src, size_t n)"

.SS "void * ft_memmove (void * dst, const void * src, size_t len)"

.SS "void * ft_memset (void * b, int c, size_t len)"

.SS "size_t ft_num_unsign (size_t num)"

.SS "int ft_open (char * file, int flags,  \&.\&.\&.)"

.SS "int ft_open_readorwrite (char * file, int read_or_write)"

.PP
0 = read, 1 = write, 2 = append 
.PP
\fBParameters\fP
.RS 4
\fIfile\fP file to open 
.br
\fIread_or_write\fP 0 = read, 1 = write, 2 = append 
.RE
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP

.SS "void ft_pipe (int * pipe_fd)"

.SS "int ft_pointer_hexa (void * p)"

.SS "int ft_pointer_hexa_fpr (long fd, void * p)"

.SS "int ft_printf (const char * str,  \&.\&.\&.)"

.SS "int ft_putchar (char c)"

.SS "void ft_putchar_fd (char c, int fd)"

.SS "int ft_putchar_fd_fpr (long fd, int c)"

.SS "int ft_putchar_int (int c)"

.SS "void ft_putendl_fd (char * s, int fd)"

.SS "int ft_putnbr (int n)"

.SS "void ft_putnbr_fd (int n, int fd)"

.SS "int ft_putnbr_fd_fpr (long fd, int n)"

.SS "int ft_putnbr_nbr (int * n, int size)"

.SS "int ft_putstr (char * str)"

.SS "void ft_putstr_fd (char * s, int fd)"

.SS "int ft_putstr_fd_fpr (long fd, char * s)"

.SS "int ft_putstr_str (char ** str)"

.SS "int ft_putstrstr_fd_fpr (long fd, char ** str)"

.SS "int ft_round (double num)"

.SS "int ft_sed (char * file, char * s1, char * s2)"

.SS "int ft_snprintf (char * str, size_t size, const char * format,  \&.\&.\&.)"

.SS "char ** ft_split (char * filename, const char * s, char c)"

.SS "long * ft_split_long (char * filename, char const * array_source, char delimitator, int * size)"

.SS "char * ft_strchr (const char * s, int c)"

.SS "int ft_strchr_char_duplicate (char c, char ** argv, int i)"

.SS "char * ft_strchr_char_duplicate_interation (char ** array_char)"

.SS "char * ft_strchr_gnl (char * s, int c)"

.SS "int * ft_strchr_int_duplicate (int * array_int, int size, int position)"

.SS "int * ft_strchr_int_duplicate_interation (int * array_int, int size)"

.SS "int ft_strcmp (const char * s1, const char * s2)"

.SS "int ft_strcmp_duplicate (char * str, char ** array)"

.SS "int ft_strcmp_duplicate_inter (char ** array)"

.SS "char * ft_strdup (char * name, const char * s1)"

.SS "void ft_striteri (char * s, void(*)(unsigned int, char *) f)"

.SS "char * ft_strjoin (char * filename, char const * s1, char const * s2)"

.SS "char * ft_strjoin_gnl (char * left_str, char * buff, int c)"

.SS "size_t ft_strlcat (char * dst, const char * src, size_t dstsize)"

.SS "size_t ft_strlcpy (char * dst, const char * src, size_t dstsize)"

.SS "size_t ft_strlen (const char * str)"

.SS "size_t ft_strlen_gnl (char * s, int c)"

.SS "char * ft_strmapi (char const * s, char(*)(unsigned int, char) f)"

.SS "int ft_strncmp (const char * s1, const char * s2, size_t n)"

.SS "char * ft_strnstr (const char * haystack, const char * needle, size_t len)"

.SS "long ft_strol (const char * str, char ** endptr, int base)"

.SS "char * ft_strrchr (const char * s, int c)"

.SS "char * ft_strtrim (char const * s1, char const * set)"

.SS "char * ft_substr (char * filename, const char * s, unsigned int start, size_t len)"

.PP
Extracts a substring from a given string\&. This function allocates (with ft_calloc_fd) and returns a substring from the string 's'\&. The substring begins at index 'start' and is of maximum size 'len'\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The name of the file to be used with ft_calloc_fd and ft_strdup\&. 
.br
\fIs\fP The original string from which the substring will be extracted\&. 
.br
\fIstart\fP The starting index of the substring in the original string\&. 
.br
\fIlen\fP The maximum length of the substring to be extracted\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to the newly allocated substring, or NULL if the allocation fails\&. 
.RE
.PP

.SS "int ft_tolower (int c)"

.SS "int ft_toupper (int c)"

.SS "int ft_write_bff (int fd, char * string, int len)"

.SS "char * get_next_line (int fd)"

.SS "char * get_next_line_join (int fd)"

.SS "int get_next_line_split (int fd, char ** line)"

.SS "void halt_exit (int status, char * description)"

.SS "void halt_exit_ (int status)"

.SS "void halt_exit_fd (int status)"

.SS "void heap_sort (int arr[], int n)"

.SS "void heapify (int arr[], int n, int i)"

.SS "void intro_sort (int arr[], int n)"

.SS "void matrix3_init (float(*) matrix[3])"

.SS "int partition (int arr[], int low, int high)"

.SS "void print_bits (unsigned char octet)"

.SS "void quick_sort (int arr[], int low, int high, int depthlimit)"

.SS "void swap_introsort (int * a, int * b)"

.SH "Author"
.PP 
Generated automatically by Doxygen for push_swap from the source code\&.
