<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_2__0__input__check_8c" xml:lang="en-US">
<title>src/push_swap/errors/2_0_input_check.c File Reference</title>
<indexterm><primary>src/push_swap/errors/2_0_input_check.c</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;push_swap.h&quot;<?linebreak?></programlisting>Include dependency graph for 2_0_input_check.c:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="2__0__input__check_8c__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_2__0__input__check_8c_1a788f5366d812d5836a70746e7ab64897">error_handling_input_1</link> (t_list_program *list_program)</para>

<para>Error handling and egde cases. </para>
</listitem>
            <listitem><para>void <link linkend="_2__0__input__check_8c_1a485614ab5a13c8271c688910e4728047">error_handling_input_0</link> (int argc, char **argv)</para>
</listitem>
            <listitem><para>void <link linkend="_2__0__input__check_8c_1ad93321e5938c4618cee960c0a3878fc1">is_sorted_linked_list_push</link> (t_list_program *list_program)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_2__0__input__check_8c_1a485614ab5a13c8271c688910e4728047"/><section>
    <title>error_handling_input_0()</title>
<indexterm><primary>error_handling_input_0</primary><secondary>2_0_input_check.c</secondary></indexterm>
<indexterm><primary>2_0_input_check.c</primary><secondary>error_handling_input_0</secondary></indexterm>
<para><computeroutput>void error_handling_input_0 (int argc, char ** argv)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="2__0__input__check_8c_a485614ab5a13c8271c688910e4728047_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_2__0__input__check_8c_1a788f5366d812d5836a70746e7ab64897"/><section>
    <title>error_handling_input_1()</title>
<indexterm><primary>error_handling_input_1</primary><secondary>2_0_input_check.c</secondary></indexterm>
<indexterm><primary>2_0_input_check.c</primary><secondary>error_handling_input_1</secondary></indexterm>
<para><computeroutput>void error_handling_input_1 (t_list_program * list_program)</computeroutput></para><para>

<para>Error handling and egde cases. </para>
</para>

<para><formalpara>
<title>Details:</title>
<para>This module provides functions to handle errors and edge cases in the input for the push_swap program. It includes checks for the following:</para>
</formalpara>
<itemizedlist>
<listitem>
<para>Duplicate values in the input</para>
</listitem><listitem>
<para>Non-integer values in the input</para>
</listitem><listitem>
<para>Insufficient number of arguments</para>
</listitem><listitem>
<para>Empty or null arguments</para>
</listitem><listitem>
<para>Already sorted input</para>
</listitem><listitem>
<para>Single element input</para>
</listitem><listitem>
<para>Sorted linked list in stack_a</para>
</listitem><listitem>
<para>Non-empty stack_b</para>
</listitem></itemizedlist>
</para>

<para><formalpara>
<title>Functions:</title>
<para><itemizedlist>
<listitem>
<para>error_handling_input_1: for duplicates, non-integers, and sorted input.</para>
</listitem><listitem>
<para>error_handling_input_0: for the number of arguments and empty arguments.</para>
</listitem><listitem>
<para>is_sorted_linked_list_push: Checks if stack_a is sorted, if stack_b is empty, and handles memory release for termination. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="2__0__input__check_8c_a788f5366d812d5836a70746e7ab64897_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="2__0__input__check_8c_a788f5366d812d5836a70746e7ab64897_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_2__0__input__check_8c_1ad93321e5938c4618cee960c0a3878fc1"/><section>
    <title>is_sorted_linked_list_push()</title>
<indexterm><primary>is_sorted_linked_list_push</primary><secondary>2_0_input_check.c</secondary></indexterm>
<indexterm><primary>2_0_input_check.c</primary><secondary>is_sorted_linked_list_push</secondary></indexterm>
<para><computeroutput>void is_sorted_linked_list_push (t_list_program * list_program)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="2__0__input__check_8c_ad93321e5938c4618cee960c0a3878fc1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
