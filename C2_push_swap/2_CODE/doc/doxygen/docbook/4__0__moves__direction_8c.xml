<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_4__0__moves__direction_8c" xml:lang="en-US">
<title>src/push_swap/moves/4_0_moves_direction.c File Reference</title>
<indexterm><primary>src/push_swap/moves/4_0_moves_direction.c</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;push_swap.h&quot;<?linebreak?></programlisting>Include dependency graph for 4_0_moves_direction.c:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="4__0__moves__direction_8c__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_4__0__moves__direction_8c_1afccc17cf6947e8045b7157ace02a1457">push</link> (char direction, t_list_program *list_program)</para>

<para>Numbers moved from one stack to another using: push, swap, rotate. </para>
</listitem>
            <listitem><para>void <link linkend="_4__0__moves__direction_8c_1aa2036f5bf4b8d176da973726dd806078">swap</link> (char stack_name, t_list_program *list_program)</para>
</listitem>
            <listitem><para>void <link linkend="_4__0__moves__direction_8c_1a52d7746c8b7628a2e18e1069db470556">rotate</link> (char *direction, char stack_name, t_list_program *list_program)</para>

<para>Rotates the specified stack. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_4__0__moves__direction_8c_1afccc17cf6947e8045b7157ace02a1457"/><section>
    <title>push()</title>
<indexterm><primary>push</primary><secondary>4_0_moves_direction.c</secondary></indexterm>
<indexterm><primary>4_0_moves_direction.c</primary><secondary>push</secondary></indexterm>
<para><computeroutput>void push (char direction, t_list_program * list_program)</computeroutput></para><para>

<para>Numbers moved from one stack to another using: push, swap, rotate. </para>
</para>

<para><formalpara>
<title>Details:</title>
<para>This module provides functions to perform various stack operations for the push_swap program. It includes the following functionalities:</para>
</formalpara>
<itemizedlist>
<listitem>
<para>push(A to B or B to A),</para>
</listitem><listitem>
<para>swap(A or B or both),</para>
</listitem><listitem>
<para>rotate(Tail to head or Next to head, one stack or both at the same time ).</para>
</listitem><listitem>
<para>Handling edge cases such as empty stacks or stacks with a single element</para>
</listitem></itemizedlist>
</para>

<para><formalpara>
<title>Functions:</title>
<para><itemizedlist>
<listitem>
<para>void <link linkend="_4__0__moves__direction_8c_1afccc17cf6947e8045b7157ace02a1457">push(char direction, t_list_program *list_program)</link>: Moves the top element from one stack to another.</para>
</listitem><listitem>
<para>void <link linkend="_4__0__moves__direction_8c_1aa2036f5bf4b8d176da973726dd806078">swap(char stack_name, t_list_program *list_program)</link>: Swaps the top two elements of a stack.</para>
</listitem><listitem>
<para>void <link linkend="_4__0__moves__direction_8c_1a52d7746c8b7628a2e18e1069db470556">rotate(char *direction, char stack_name, t_list_program *list_program)</link>: Rotates a stack in both directions. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="4__0__moves__direction_8c_afccc17cf6947e8045b7157ace02a1457_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_4__0__moves__direction_8c_1a52d7746c8b7628a2e18e1069db470556"/><section>
    <title>rotate()</title>
<indexterm><primary>rotate</primary><secondary>4_0_moves_direction.c</secondary></indexterm>
<indexterm><primary>4_0_moves_direction.c</primary><secondary>rotate</secondary></indexterm>
<para><computeroutput>void rotate (char * direction, char stack_name, t_list_program * list_program)</computeroutput></para><para>

<para>Rotates the specified stack. </para>
</para>

<para><formalpara>
<title>Details:</title>
<para><itemizedlist>
<listitem>
<para>function rotates the given stack based on the provided direction.</para>
</listitem><listitem>
<para>The direction &quot;r&quot; rotates the stack upward (counter-clockwise, head to tail).</para>
</listitem><listitem>
<para>The direction &quot;rr&quot; rotates the stack downward (clockwise, tail to head).</para>
</listitem><listitem>
<para>The stack_name &apos;a&apos; refers to stack_a and &apos;b&apos; refers to stack_b.</para>
</listitem><listitem>
<para>If the specified stack is empty or contains only one element, no rotation is performed.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara>
<title>Usage:</title>
<para><itemizedlist>
<listitem>
<para><emphasis role="bold">direction</emphasis> The rotation direction: &quot;r&quot; or &quot;rr&quot;.</para>
</listitem><listitem>
<para><emphasis role="bold">stack_name</emphasis> The identifier for the stack: &apos;a&apos; or &apos;b&apos;.</para>
</listitem><listitem>
<para><emphasis role="bold">list_program</emphasis> Pointer to the structure containing the stacks.</para>
</listitem><listitem>
<para><emphasis role="bold">return</emphasis> is void. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="4__0__moves__direction_8c_a52d7746c8b7628a2e18e1069db470556_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="4__0__moves__direction_8c_a52d7746c8b7628a2e18e1069db470556_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_4__0__moves__direction_8c_1aa2036f5bf4b8d176da973726dd806078"/><section>
    <title>swap()</title>
<indexterm><primary>swap</primary><secondary>4_0_moves_direction.c</secondary></indexterm>
<indexterm><primary>4_0_moves_direction.c</primary><secondary>swap</secondary></indexterm>
<para><computeroutput>void swap (char stack_name, t_list_program * list_program)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="4__0__moves__direction_8c_aa2036f5bf4b8d176da973726dd806078_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="4__0__moves__direction_8c_aa2036f5bf4b8d176da973726dd806078_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
